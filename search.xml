<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>“Coding Basis”</title>
    <url>/2024/02/19/Coding-Basis/</url>
    <content><![CDATA[<p>This article briefly outlines the principle of Coding Basis for the entire firmware of the cube.</p>
<hr />
<h3 id="imu-mahony-algorithm-ahrs">#IMU: Mahony Algorithm (AHRS)</h3>
<h4 id="obtain-error-by-exploiting-gravity-alignment"># Obtain Error by Exploiting Gravity Alignment</h4>
<p>First, it should be noted that the Mahony algorithm assumes that the acceleration measured by the accelerometer is entirely provided by gravity, that is, the acceleration produced by the motion of the object itself can be neglected. Under this assumption, if we assume the current attitude of the body is represented by quaternion <span class="math inline">\(q\)</span>, then converting the representation of the gravity vector <span class="math inline">\(g = [0,0,1]\)</span> to the body coordinate system should be: <span class="math inline">\(v = C\{q_t\} · g\)</span>, where <span class="math inline">\(C\{q_t\}\)</span> represents the rotation matrix corresponding to quaternion <span class="math inline">\(q_t = a + bi + cj +dk\)</span>. <span class="math display">\[
\begin{equation}
C\{q_t\} =\begin{bmatrix}
1 - 2c^2 - 2d^2 &amp; 2bc - 2ad &amp; 2bd + 2ac\\
2bc + 2ad &amp; 1 - 2b^2 - 2d^2 &amp; 2cd - 2ab\\
2bd - 2ac &amp; 2cd + 2ab &amp; 1 - 2b^2 - 2c^2
\end{bmatrix}
\end{equation}
\]</span> Substitute <span class="math inline">\(g = [0,0,1]\)</span>, Then <span class="math inline">\(v = C\{q_t\} · g = [2(bd-ac), 2(cd+ab), 1-2(b^2+c^2)]^T\)</span>.</p>
<p>We denote the acceleration measured by the accelerometer as <span class="math inline">\(a = [a_x, a_y, a_z]\)</span>. Ideally, if there are no errors, this acceleration <span class="math inline">\(a\)</span> should be equal to the vector <span class="math inline">\(v\)</span>, but in reality, the two vectors do not coincide perfectly, resulting in a certain error <span class="math inline">\(e\)</span>.</p>
<p>To express this error <span class="math inline">\(e\)</span>, we can use the cross product: <span class="math inline">\(e = a \times v\)</span>. When <span class="math inline">\(a\)</span> and <span class="math inline">\(v\)</span> are normalized to unit vectors, the result reflects the angle between them. More accurately, the error at the next moment <span class="math inline">\(t+1\)</span>​ can be written as: <span class="math display">\[
\begin{equation}
e_{t+1} = a_{t+1} \times v(q_{\text{est},t})
\end{equation}
\]</span> where <span class="math inline">\(v(q_{\text{est},t})\)</span> is based on the estimated orientation quaternion at the current moment <span class="math inline">\(t\)</span>. Furthermore, the integral of this error up to moment <span class="math inline">\(t+1\)</span>​ is denoted as: <span class="math display">\[
\begin{equation}
e_{i,t+1} = e_{i,t} + e_{t+1} \Delta t
\end{equation}
\]</span> The integral of the error also participates in subsequent calculations.</p>
<h4 id="angular-velocity-fusion">#Angular Velocity Fusion</h4>
<p>At this point, we have calculated the error <span class="math inline">\(e\)</span> observed by the accelerometer. Let the angular velocity provided by the gyroscope be denoted as <span class="math inline">\(w_{t+1}\)</span>. By adding the gyroscope's angular velocity error to the previously mentioned error and adopting the commonly used Proportional-Integral (PI) controller concept in control systems, the corrected angular velocity can be obtained as follows: <span class="math display">\[
\begin{equation}
w_{t+1} = w_{t+1} + K_p e_{t+1} + K_i e_{i,t+1}
\end{equation}
\]</span></p>
<hr />
<span id="more"></span>
<h3 id="control-lqr-controller">#Control: LQR Controller</h3>
<p>Optimal control theory primarily focuses on operating dynamical systems at the minimum cost. If the dynamics of the system can be represented by a set of linear differential equations, and its cost is a quadratic functional, such problems are known as Linear-Quadratic (LQ) problems. The solution to these problems is known as a Linear-Quadratic Regulator (LQR).</p>
<p>The approach involves first defining a cost function, then allowing engineers to set weights, and using mathematical algorithms to find the settings that minimize the cost function. The cost function is generally defined as the sum of the deviations of key measurements (such as flight altitude or process temperature) from their ideal values. The algorithm attempts to adjust parameters to minimize these undesirable deviations. The magnitude of the control actions themselves is also included in the cost function.</p>
<p>Its easier now to understand the equation appeared in <a href="https://moxuef.github.io/2024/02/04/Control-Theory/">Automatic Control Principles</a> that: <span class="math display">\[
\begin{equation}
    \quad L(qr)_n = (angle_n - angle_{ne}) \times  k_{np} + gyro_n \times k_{nv}+ s_n \times k_{ns} \ (n = x, y, z)
\end{equation}
\]</span></p>
<hr />
<h3 id="coom.-protocol-i2c">#COOM. Protocol: I2C</h3>
<p>I2C (Inter-Integrated Circuit), also known as IIC, is a two-wire serial bus that adopts a master-slave (one master device and multiple slave devices) bus structure. Each device on the bus has a specific device address to distinguish it from other devices on the same I2C bus.</p>
<p><img src="/images/Coding-Basis/IIC.jpg" style="zoom:75%;" align=center/></p>
<h4 id="communication-process">#Communication Process</h4>
<p>The IIC bus protocol essentially boils down to a few key elements: <strong>start signal</strong>, <strong>stop signal</strong>, <strong>acknowledge signal</strong>, and <strong>data validity</strong>.</p>
<ol type="1">
<li><strong>Start Condition</strong>: At the beginning of the communication, the master generates a start condition. This is achieved by pulling the data line (SDA) from high to low while keeping the clock line (SCL) high.</li>
<li><strong>Send Device Address and R/W bit</strong>: Next, the master transmits the address of the target slave device on the data line. The last bit of the address indicates whether the operation is a read (1) or write (0).</li>
<li><strong>Wait for Acknowledge Signal (ACK)</strong>: After sending the address and R/W bit, the master releases the data line and waits for an acknowledgment from the slave device. The slave sends an acknowledge signal (ACK) by pulling the data line low, indicating it is ready to receive or send data.</li>
<li><strong>Data Transfer</strong>:
<ul>
<li><strong>Write Operation</strong>: If it's a write operation, the master sends data bytes one by one to the slave device. After each byte, the master waits for an acknowledgment signal from the slave.</li>
<li><strong>Read Operation</strong>: If it's a read operation, the slave sends data bytes one by one to the master. The master sends an acknowledge signal after receiving each byte, indicating it is ready to receive the next byte.</li>
</ul></li>
<li><strong>Stop Condition</strong>: After the completion of data transfer, the master generates a stop condition to end the communication. This is achieved by pulling the data line (SDA) from low to high while the clock line (SCL) remains high.</li>
<li><strong>Data Validity</strong>: After the receiver gets valid data, it responds to the sender with a signal. The sender, after transmitting a byte (8 bits) of data, releases the data line to receive the acknowledgment during the 9th clock cycle.
<ul>
<li>When the SDA is at a low level, it indicates a valid acknowledgment (ACK), signifying successful reception by the receiver</li>
<li>When the SDA is at a high level, it indicates a not-acknowledged signal (NACK), signifying the receiver did not successfully receive the data.</li>
</ul></li>
</ol>
<p><img src="/images/Coding-Basis/IIC_Frame.jpg" style="zoom:55%;" align=center/></p>
]]></content>
      <categories>
        <category>Theory</category>
      </categories>
  </entry>
  <entry>
    <title>”Automatic Control Principles“</title>
    <url>/2024/02/04/Control-Theory/</url>
    <content><![CDATA[<p>This article briefly outlines the principle of balance control for the entire cube.</p>
<hr />
<h2 id="unilateral-balance">#Unilateral Balance</h2>
<p><img src="/images/Control-Theory/Unilateral.jpg" style="zoom:18%;" align=center/></p>
<ul>
<li><p>System State Variables:</p>
<ul>
<li><p>Cube Angle: <span class="math inline">\(\theta\)</span></p></li>
<li><p>Cube Angular Velocity: <span class="math inline">\(\theta&#39;\)</span></p></li>
</ul></li>
<li><p>System Control Variable:</p>
<ul>
<li>Momentum Wheel Angular Velocity: <span class="math inline">\(\omega\)</span></li>
</ul></li>
</ul>
<p>The IMU's X-axis, the momentum wheel's axis of rotation, and the balancing edge are all in the same plane. As a result: <span class="math display">\[
\begin{align*}
    \left\{
        \begin{array}{l}
        \ \theta = angle_x - angle_e  \\[1ex]
        \ \theta&#39; = gyro_x \\[1ex]
        \ \omega&#39; = motorspeed_x \\[1ex]
    \end{array}
    \right.
\end{align*}
\]</span> <span class="math display">\[
\begin{equation}
    \Rightarrow \quad Lqr = (angle_x - angle_e) \times  k_p + gyro_x \times k_v + motorspeed_x \times k_s
\end{equation}
\]</span></p>
<hr />
<span id="more"></span>
<h2 id="corner-balance">#Corner Balance</h2>
<p>The basic principle is to add control of the Y-axis to unilateral balance.</p>
<p><img src="/images/Control-Theory/Corner.jpg" style="zoom:15%;" align=center/></p>
<p>Assuming the current posture is a point balance. Establish a coordinate system based on the three-axis direction of the IMU, with the origin coinciding with the cube's balanced corner. The projections of the momentum wheel center onto the X-Y plane are respectively CH1, CH2, CH3.</p>
<p><img src="/images/Control-Theory/Model.jpg" style="zoom:5%;" align=center/></p>
<p>Following equations can be derived according to the model above: <span class="math display">\[
\begin{align*}
    \left\{
        \begin{array}{l}
        \ s_x = s_{ch2} - (s_{ch3} + s_{ch1}) \cdot sin(30^\circ)  \\[1ex]
        \ s_y = (s_{ch3} - s_{ch1}) \cdot cos(30^\circ) \\[1ex]
        \ s_z = s_{ch1} + s_{ch2} + s_{ch3} \\[1ex]
    \end{array}
    \right.
\end{align*}
\]</span></p>
<p><span class="math display">\[
\begin{equation}
    \Rightarrow \quad L(qr)_n = (angle_n - angle_{ne}) \times  k_{np} + gyro_n \times k_{nv}+ s_n \times k_{ns} \ (n = x, y, z)
\end{equation}
\]</span></p>
<hr />
<h2 id="regression-calculation">#Regression Calculation</h2>
<p>Inverse calculation from x, y control to motor speed from the LQR controller equations and geometry relationships.</p>
<p><span class="math display">\[
\begin{align*}
    \left\{
        \begin{array}{l}
        \ S_{CH1} = -L_x \cdot sin(30^\circ) - L_y \cdot cos(30^\circ) + \frac{1}{3} L_z  \\[1ex]
        \ S_{CH2} = L_x + \frac{1}{3} L_z \\[1ex]
        \ S_{CH3} = -L_x \cdot sin(30^\circ) + L_y \cdot cos(30^\circ) + \frac{1}{3} L_z \\[1ex]
    \end{array}
    \right.
\end{align*}
\]</span></p>
]]></content>
      <categories>
        <category>Theory</category>
      </categories>
  </entry>
  <entry>
    <title>”Hardware Design Analysis“</title>
    <url>/2024/02/12/Hardware-Design/</url>
    <content><![CDATA[<p>This article briefly outlines the design principle of all the PCB applied in this cube.</p>
<hr />
<h2 id="main-control-board-mcb">#Main Control Board (MCB)</h2>
<p>The entire main control board can be simply divided into two major parts: signal communication and power supply. The main components of each part are as follows:</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Signal Line</th>
<th style="text-align: center;">Power Line</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img src="/images/Hardware-Design/Signal.jpg" style="zoom:25%;" align=center/></td>
<td style="text-align: center;"><img src="/images/Hardware-Design/Battery.jpg" style="zoom:25%;" align=center/></td>
</tr>
</tbody>
</table>
<p>Simply put, the main control PCB provides:</p>
<ul>
<li>2 x ESP32s as Microprocessors -- ①</li>
<li>3-channel brushless FOC (Field Oriented Control) drive, 12V input -- ②</li>
<li>A circuit for boosting a 5V input to charge a 3S lithium battery -- ③</li>
<li>A 3S lithium battery charge and discharge balancing circuit -- ④</li>
<li>Button input and indicator light output -- ⑤</li>
<li>CAN communication between MCU1 and MCU2 -- ⑥</li>
</ul>
<p><img src="/images/Hardware-Design/MCB.jpg" style="zoom:55%;" align=center/></p>
<hr />
<span id="more"></span>
<h3 id="motor-electronic-speed-controller-esc">#Motor Electronic Speed Controller (ESC）</h3>
<p>Three TI DRV8313 driver chips are applied for receiving signals from a microcontroller and accordingly adjusting the phase and frequency of the three-phase power supply to drive the motor rotation. Following is a simple schematic provided on the <a href="https://www.ti.com/lit/gpn/drv8313">data sheet</a> by TEXAS INSTRUMENT.</p>
<p><img src="/images/Hardware-Design/ESC.jpg" style="zoom:60%;" align=center/></p>
<hr />
<h3 id="v-to-5v-5v-to-3.3v-step-down-module">#12V-to-5V &amp; 5V-to-3.3V Step-Down Module</h3>
<h4 id="v-to-5v-tps5430">##12V-to-5V (<a href="https://www.ti.com/lit/gpn/tps5430">TPS5430</a>)</h4>
<p>This module is dedicated to stepping down the 12V power supply from a 3S lithium battery to 5V, thereby powering the SOP8, which is a high-speed CAN bus transceiver chip. At the same time, it also serves as the input for further stepping down from 5V to 3.3V.</p>
<h4 id="v-to-3.3vams1117">##5V-to-3.3V(<a href="http://www.advanced-monolithic.com/pdf/ds1117.pdf">AMS1117</a>)</h4>
<p>The AMS1117 regulator chip is used to step down the 5V input to 3.3V. The 3.3V power supply is crucial as it is responsible for powering all the following chips:</p>
<ul>
<li>2 ESP32 microprocessor chips</li>
<li>A MPU6050 chip</li>
<li>Three motor magnetic encoder chips AS5600</li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">12V to 5V @ 3A</th>
<th style="text-align: center;">5V to 3.3V @ 1A</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img src="/images/Hardware-Design/12to5.jpg" style="zoom:55%;" align=center/></td>
<td style="text-align: center;"><img src="/images/Hardware-Design/5to3.jpg" style="zoom:55%;" align=center/></td>
</tr>
</tbody>
</table>
<hr />
<h2 id="battery-control">#Battery Control</h2>
<p>The battery control section is mainly divided into two parts: a 5V-to-12V boost charging module and a battery balancer.</p>
<p>The former one is a bit complicated and will not be covered in this blog. All we should know is that this module applies a <a href="https://pdf1.alldatasheet.com/datasheet-pdf/view/1133224/CONSONANCE/CN3300.html">CN3300</a></p>
<p>battery power management chip.</p>
<p><img src="/images/Hardware-Design/Booster.jpg" style="zoom:65%;" align=center/></p>
<p>For the latter part:</p>
<h4 id="battery-balancer">##Battery Balancer</h4>
<p>Since there are 3 lithium batteries, the main control board includes a passive balancing circuit as follows:</p>
<p><img src="/images/Hardware-Design/BB.jpg" style="zoom:65%;" align=center/></p>
<p>The IC determines whether to activate the corresponding balancing MOSFETs to balance the battery by continuously monitoring the voltage between $V_{DD} $and <span class="math inline">\(V_{SS}\)</span>. When necessary, it drains current from the battery cell through internal transistors to an external resistor (R27, R33, R26), thereby reducing the voltage of that cell.</p>
]]></content>
      <categories>
        <category>Theory</category>
      </categories>
  </entry>
  <entry>
    <title>Intro</title>
    <url>/2024/03/01/Intro/</url>
    <content><![CDATA[<h3 id="embarking-on-a-robotic-revolution"><strong>#Embarking on a Robotic Revolution</strong></h3>
<p>This blog chronicles the evolution of our project, Cubli, under the meticulous guidance of our Academic Advisors, Dr. Simon Maher and Dr. Barry Smith. Our team comprises Sidharth Babani, Feijie Jia, Yuanpeng Li, and Shaoxiang Wang (Sort alphabetically by last name) .</p>
<hr />
<h3 id="navigation">#Navigation</h3>
<ul>
<li><p>To explore more about this project, navigate to the <strong><a href="https://moxuef.github.io/about/">About</a></strong> section.</p></li>
<li><p>For insights into our progress and updates, please visit the <strong><a href="https://moxuef.github.io/categories/Weekly-Activities/">Weekly Activities</a></strong> category.</p></li>
<li><p>For detailed explanations and theoretical foundations, direct your attention to the <strong><a href="https://moxuef.github.io/categories/Theory/">Theory</a></strong> section.</p></li>
</ul>
<hr />
]]></content>
      <categories>
        <category>Navigation</category>
      </categories>
  </entry>
  <entry>
    <title>Week 0: Timeline Planning &amp; Role Allocation</title>
    <url>/2024/01/27/Week-0/</url>
    <content><![CDATA[<p>Week 0 refers to the week before the start of semester 2: [01.22 - 01.28]</p>
<p>Normal Group Meeting: 01.26.2024</p>
<h2 id="timeline-planning">#Timeline Planning</h2>
<p>Although we are well aware that plans cannot always keep up with changes, an advanced plan is still necessary. In this week's team meeting, since the semester has not yet begun, we jointly drafted a complete timeline for the project from the start of the semester to the final report submission, as shown in the table below.</p>
<p><img src="/images/Week-0/Timeline.jpg" style="zoom:55%;" align=center/></p>
<hr />
<h2 id="role-allocation">#Role Allocation</h2>
<p>Generally, roles were assigned according to the strengths of each member as well as our interests.</p>
<span id="more"></span>
<ul>
<li><strong>Yuanpeng Li</strong>, our ‘hardware engineer’, is in charge of the soldering and the hardware analysis part. His experience, precision and attention to detail were the main reasons he got this role.</li>
<li><strong>Feijie Jia</strong> is the project manager. He meticulously planned our work with his technical insight, taking primary responsibility for overseeing the progress of the entire project. Additionally, he will participate in the learning of all theoretical knowledge sections to ensure that while the team can "divide the work," we can also "collaborate."</li>
<li><strong>Shaoxiang Wang</strong> was tasked with software development analysis. He had studied the coding fundamentals required for this project. His breakdown of the code's functional structure will make it easier for everyone to understand what the code signifies.</li>
<li><strong>Sidharth Babani</strong>, besides documenting our journey, he delved into system design and control principle. His role encompasses the theories that form the foundation of all software and hardware, intertwining with every aspect of the project.</li>
</ul>
<p>Each member will explain the content they are responsible for during the specific weekly meetings, ensuring that the entire team has a comprehensive understanding of the project.</p>
]]></content>
      <categories>
        <category>Weekly Activities</category>
      </categories>
  </entry>
  <entry>
    <title>Week 1: Order Placement &amp; PCB Soldering</title>
    <url>/2024/02/04/Week-1/</url>
    <content><![CDATA[<p>Week 1 refers to the first week of semester 2: [01.29 - 02.04]</p>
<p>Normal Group Meeting: 02.03.2024</p>
<h2 id="order-placement">#Order Placement</h2>
<p>This week mainly witnessed many orders being placed and delivered. The PCB Orders are quoted from <a href="https://uk.beta-layout.com/">Beta LAYOUT</a>, and other essential chips, SMD components and peripherals are ordered through <a href="https://www.digikey.co.uk/">DigiKey</a> and <a href="https://www.lcsc.com/">LCSC Electronics</a>.</p>
<p>Here is one of the quotes once placed:</p>
<p><img src="/images/Week-1/Layout.jpg" style="zoom:65%;" align=center/></p>
<p>It must be emphasized that the quality of the PCBs are really good :)</p>
<hr />
<span id="more"></span>
<h2 id="pcbs-soldering">#PCBs Soldering</h2>
<p>All the PCBs are of the 0402 package type, which make it rather hard for us to soldering them. Fortunately, Feijie Jia has ordered solder paste stencil, which makes the process a little bit simplified ---- but only the other four PCBs.</p>
<p>For the 6-layer main control board, it's too complicated for us to solder them by hands, as you can see the board below: <img src="/images/Week-1/MCB.jpg" style="zoom:65%;" align=center/></p>
<p>Dr. Barry has led us to the university PCB labs for sake of any possible help, but the staff politely declined at the first glance. As a result, Feijie planned to get our PCBs populated from a factory, which should and will be done as soon as possible.</p>
<p>Our sessions were not just productive but also moments of learning. Yuanpeng Li and Feijie Jia meticulous worked on the assembly. Shaoxiang Wang and Sidharth conducted the initial software tests.</p>
<hr />
<h3 id="next-week-plan">#Next Week Plan</h3>
<ul>
<li>Present a layout for poster</li>
<li>Place a surface mount technology for the MCB</li>
<li>Continuously working on the hardware and software learning parts.</li>
</ul>
<hr />
<h3 id="theory-study">#Theory Study</h3>
<p>This week, we primarily studied the most basic control principles of Cubli, including some mathematical modeling and analysis. For more information, please visit <a href="https://moxuef.github.io/2024/02/04/Control-Theory/">Automatic Control Principles</a>.</p>
<hr />
]]></content>
      <categories>
        <category>Weekly Activities</category>
      </categories>
  </entry>
  <entry>
    <title>Week 2: Focus on Hardware and Software Design</title>
    <url>/2024/02/12/Week-2/</url>
    <content><![CDATA[<p>Week 2 refers to the second week of semester 2: [02.05 - 02.11]</p>
<p>Normal Group Meeting: 02.10.2024</p>
<hr />
<h3 id="pcb-fabrication-update">#PCB Fabrication Update:</h3>
<p>We successfully dispatched the PCBs for fabrication and anticipates receiving them by next Tuesday.</p>
<hr />
<h3 id="hardware-firmware-analysis"># Hardware &amp; Firmware Analysis</h3>
<p>Given the indispensable nature of the main control board, we plan to temporarily put the assembly of Cubli on hold.</p>
<p>During the waiting time, we dedicated this week to intensively researching code and hardware schematics to ensure they are well-prepared for the next stages of the project.</p>
<ul>
<li><p>For the Hardware Analysis part, please turn to <a href="https://moxuef.github.io/2024/02/12/Hardware-Design/#more">Hardware Design</a> for more information</p></li>
<li><p>The MCU firmware (or just Coding) is a bit too complicated... So the organization and analysis of the code are still underway.</p></li>
</ul>
<p>Fortunately, the environment setup with CLion (MinGW64) + PlatformIO went very smoothly. After configuring, Feijie and Dylan conducted some simple tests, and the results were surprisingly good. Now, it is possible to achieve instant code modifications and flashing. Additionally, Feijie has written a CMake file for compiling this segment of code.</p>
<hr />
<span id="more"></span>
<h3 id="poster-layout-and-blog-documentation">#Poster Layout and Blog Documentation</h3>
<p>Sid is responsible for meticulously documenting our project's progress and has already commenced the creation of some of the posters. Feijie is enhancing the reading experience by composing the blog through Hexo on Github.</p>
<p><img src="/images/Week-2/Web.jpg" style="zoom:35%;" align=center/></p>
<hr />
<h3 id="next-week-plan">#Next Week Plan</h3>
<ul>
<li>Complete the assembly of Cubli</li>
<li>Upload the code immediately after assembly is finished</li>
<li>Begin debugging the system</li>
<li>Continue with the coding analysis</li>
</ul>
]]></content>
      <categories>
        <category>Weekly Activities</category>
      </categories>
  </entry>
  <entry>
    <title>Week 3: Obvious Progress but Greater Challenges.</title>
    <url>/2024/02/18/Week-3/</url>
    <content><![CDATA[<p>Week 3 refers to the second week of semester 2: [02.12 - 02.18]</p>
<p>Normal Group Meeting: 02.17.2024</p>
<hr />
<h3 id="cubli-assmbly">#Cubli Assmbly</h3>
<p>As expected, the main control board arrived on time after SMT. During this week's lab, we collectively conducted the initial assembly and testing of Cubli. The results were quite successful — at least Cubli has now become a cube, rather than a collection of scattered panels, PCBs, and ribbon cables.</p>
<p><img src="/images/Week-3/Assmbly.jpg" style="zoom:45%;" align=center/></p>
<hr />
<h3 id="great-challenge-abnormal-motor-operation-status">#Great Challenge: Abnormal Motor Operation Status</h3>
<span id="more"></span>
<p>After the complete assembly of Cubli, serial port debugging revealed that a significant torque caused Cubli to uncontrolledly spin at high speed . This issue was traced back to an imbalance in angular momentum, with one motor (motor 1) rotating more slowly, weaker and less steadily than expected.</p>
<h4 id="encoder-error"># Encoder Error ?</h4>
<p>The initial suspicion fell on the magnetic encoder, particularly the AS5600 chip, which was thought to be reading an incorrect angle and thus leading to an erroneous target speed for the motor.</p>
<p>A diagnostic task was implemented in the microcontroller unit (MCU) to output the motor angles through the serial port at a higher priority, aiming to closely monitor the angle readings.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">xTaskCreatePinnedToCore</span>(SomeTask, <span class="string">&quot;some&quot;</span>, <span class="number">5000</span>, <span class="literal">NULL</span>, <span class="number">3</span>, <span class="literal">NULL</span>, <span class="number">1</span>)</span><br><span class="line">-------</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SomeTask</span><span class="params">(<span class="type">void</span> *parameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(</span><br><span class="line">        	<span class="string">&quot;A = %0.2f\r\n&quot;</span>,</span><br><span class="line">        	motor1.sensor-&gt;<span class="built_in">getAngle</span>());</span><br><span class="line">        <span class="comment">// A function provided by the Simple FOC lib to get current motor angle</span></span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">50</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>After conducting tests and comparing the outputs of motor 1 and motor 2, this theory was dismissed as the cause of the issue.</p>
<hr />
<h4 id="motor-driver-error"># Motor Driver Error !</h4>
<p>Given the problem was with the motor's rotation speed, and considering that the brushless motor was initially tested in an open loop with a 0.5V voltage, it was suspected that the motor might be missing a phase.</p>
<p>Focus was then shifted towards inspecting the motor itself. By detaching motor 1 and measuring, it was confirmed that the resistance between the three phases was normal and equal, effectively ruling out the motor as the source of the problem.</p>
<p>Attention was then directed to the 7-pin port connecting the AS5600 to the main control board. After examination with an oscilloscope, it was discovered that the PWM output to motor 1 was abnormal, indicating a missing PWM signal.</p>
<p>Further measurements were taken at the power supply and output pins of motor 1's driver chip, revealing that while the power supply was normal, there was indeed a missing phase in the PWM output.</p>
<p>At this point, two potential causes remained: an issue with the signal transmission from the MCU to the motor driver chip, or a fault within the motor driver chip itself. Due to the lack of sufficient equipment, the we was unable to resolve the issue immediately.</p>
<p>This is a significant setback for us, as point balancing requires the coordination of three motors, and the failure of one motor means that point balancing cannot be achieved. The good news is, single-sided balancing only requires Motor2: a properly functioning motor.</p>
<hr />
<h3 id="next-week-plan">#Next Week Plan</h3>
<ul>
<li>Strive to achieve single-sided balance</li>
<li>Seek solutions to the motor driver malfunction issue</li>
</ul>
<hr />
<h3 id="theory-study">#Theory Study</h3>
<p>This week, we primarily studied various communication protocols, including I2C, CAN and UART. with introducing some knowledge about FreeRTOS and ARHS, which are the basis of Code analysis . For more information, please visit Coding Basis.</p>
]]></content>
      <categories>
        <category>Weekly Activities</category>
      </categories>
  </entry>
  <entry>
    <title>Week 4: Yes! That&#39;s the Unilateral Balance</title>
    <url>/2024/02/25/Week-4/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>Weekly Activities</category>
      </categories>
  </entry>
  <entry>
    <title>Week 5: Corner Balance and Bench Inspection</title>
    <url>/2024/02/04/Week-5/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>Weekly Activities</category>
      </categories>
  </entry>
</search>
